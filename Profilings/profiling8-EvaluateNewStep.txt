So far it seems like it works as expected. I would keep this separate branch for a while though.
I will try to implement the changes into the Numerical Inverse as well first to see
if something kicks back or not.



Very nice results, I appreciate it!
Agree that it can stay a branch on its own, until it will be fully functional,
  and then we can compare the real benefits of these changes.

I also noticed a big difference in absolute values of time needed to
  run a specific line ("Per Hit" column) between your and mine profilings.
It will be probably caused by the different performance of our machines
  (your "supercomputer" and mine laptop).
These differences are more than 25-fold (spsolve takes 1800 time units in my case
  and only 67 in yours).
This is a very nice example of two possible paths for the speed improvements:
  a) the code optimization (soft solution)
  b) the hardware optimization (brute force solution)
  - usually it is advised to start with the hardware optimization, because it
      is generally cheaper (as development time is quite expensive), and
      enables the code to be as understandable as possible (as speed improvements
      in the code usually mean it becomes less readable)


After fully implementing both the classic and inverse algorithm in GUI to the new
  approach, I can share the results I came up with:
  - I like the readability of the new code (for example the experiment data
      being put into a new module)
  - The classic algorithm is faster both on the paper and in the GUI, when compared
      with the previous solution
  - The inverse is very fast on paper, but in the GUI it is sometimes even slower
      than the previous one.
      - I ran the profilings, and all seems to be fine there, so I am not sure about
          the cause, will investigate it further
      - However, the speed worsening (if any) is almost neglectable, and I did not
          run any real tests (just visual ones), so it could be a coincidence
  - I will be happy to merge it soon, after we agree on it (really the only
      "objection" I have is the last abovementioned point)

The Inverse was slower because in the master branch there was tolerance set to 1e-6.
  while in this branch it was set to 1e-8. So it did more inner iterations before accepting the fluxes.
  I found that out by uncommenting the conveniently present print line in the inverse evaluation loop.
  I it showed about double the amount of inner iterations needed before accepting the flux.
  I set the kwarg in the inverse problem preparation. The tolerance should probably be one of the choices in the GUI.
  If the speed of the inverse is resolved on your side, I think you can merge it.



Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                               @profile
    89                                               def EvaluateNewStep(self):
    90                                                   # evaluate new boundary vector (BC means boundary condition)
    91     14502     125137.0      8.6     10.3          self.b = self.b_base.dot(self.T)  # Assemble vector b (dot() is matrix multiplication)
    92     14502      19541.0      1.3      1.6          self.b[0] += self.dt*(1-self.theta)*self.HeatFlux[self.current_step_idx]  # apply explicit portion of HeatFlux (Neumann BC 1st node)
    93     14502      14251.0      1.0      1.2          self.b[0] += self.dt*self.theta*self.HeatFlux[self.current_step_idx+1]  # apply implicit portion of HeatFlux (Neumann BC 1st node)
    94     14502      16441.0      1.1      1.4          self.b[-1] -= self.dt*(1-self.theta)*self.Exp_data.RobinAlpha*self.T[-1]  # apply explicit contribution of the body temperature (Robin BC Nth node)
    95     14502      14060.0      1.0      1.2          self.b[-1] += self.dt*(1-self.theta)*self.Exp_data.RobinAlpha*self.T_amb[self.current_step_idx]  # apply explicit contribution of the ambient temperature (Robin BC Nth node)
    96     14502      13616.0      0.9      1.1          self.b[-1] += self.dt*self.theta*self.Exp_data.RobinAlpha*self.T_amb[self.current_step_idx+1]  # apply implicit contribution of the ambient temperature (Robin BC Nth node)
    97
    98                                                   # solve the equation self.A*self.T=b
    99     14502     971012.0     67.0     80.1          self.T = spsolve(self.A, self.b)  # solve new self.T for the new step
   100                                                   #self.T_x0.append(np.interp(self.Exp_data.x0, self.x, self.T))  # save data from the temperature probes  # switching it off for now
   101     14502       8681.0      0.6      0.7          self.current_step_idx += 1  # move to new timestep
   102     14502      30232.0      2.1      2.5          self.T_x0[self.current_step_idx] = self.T_x0_interpolator(self.T)
